/*
 * SendFileDialog.java
 *
 * Created on 24 settembre 2008, 11.52
 */
package chatclient.forms;

import chatclient.ChatClientView;
import chatclient.commons.Util;
import chatclient.thread.ClientReader;
import chatclient.thread.FileSender;
import chatclient.thread.SocketFileConnector;
import java.io.File;
import java.io.IOException;
import java.net.Socket;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import org.jdesktop.application.Action;
import chatcommons.Commands.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * @author  Luigi
 */
public class SendFileDialog extends javax.swing.JFrame {

    private Log log = LogFactory.getLog(SendFileDialog.class);
    private String receiver;
    private ChatClientView ccv;
    private FileSender fileSender;
    private Socket socket;

    /** Creates new form SendFileDialog */
    public SendFileDialog(String receiver, ChatClientView ccv) {
        super();
        initComponents();
        this.receiver = receiver;
        this.ccv = ccv;
        socket = new Socket();
        percentLabel.setVisible(false);
        progressBar.setVisible(false);
        setTitle("Invio file");
        // <editor-fold defaultstate="collapsed" desc="Window Icon"> 
        try {
            setIconImage(ccv.getResourceMap().getImageIcon("trayIcon").getImage());
        } catch (Exception e) {
            log.warn(e);
        }
    // </editor-fold>



    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        send = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        fileText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        percentLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        setResizable(false);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(chatclient.ChatClientApp.class).getContext().getActionMap(SendFileDialog.class, this);
        send.setAction(actionMap.get("sendFileTo")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(chatclient.ChatClientApp.class).getContext().getResourceMap(SendFileDialog.class);
        send.setText(resourceMap.getString("send.text")); // NOI18N
        send.setName("send"); // NOI18N

        statusLabel.setText(resourceMap.getString("statusLabel.text")); // NOI18N
        statusLabel.setName("statusLabel"); // NOI18N

        fileText.setText(resourceMap.getString("fileText.text")); // NOI18N
        fileText.setName("fileText"); // NOI18N

        jButton1.setAction(actionMap.get("selectFile")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        percentLabel.setText(resourceMap.getString("percentLabel.text")); // NOI18N
        percentLabel.setName("percentLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(percentLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(statusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fileText, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(send, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(fileText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(percentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(send)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fileText;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel percentLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton send;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
    /**
     * Lancia l'invio del file
     */
    @Action
    public void sendFileTo() {
        if (send.getText().equals("Ferma")) {
            stopSend();
            return;
        }

        //verifico che la cartella di download sia valida
        String file = fileText.getText();
        File toSend = new File(file);

        //verifico che  il file da inviare sia valido sennò gli fermo l'invio
        if (!toSend.isFile()) {
            JOptionPane.showMessageDialog(this, "Il file selezionato non è valido!", "Cartella non valida", JOptionPane.WARNING_MESSAGE);
            return;
        }

        statusLabel.setText("in connessione...");
        fileText.setVisible(false);
        jButton1.setVisible(false);
        ccv.getHelper().getFileDialogs().add(this);
//        fileSender = new FileSender(new File(fileText.getText()), receiver, ccv.getOutputStream(), this);
//        
//        fileSender.execute();

        //creo un fileSocket se nn esiste e gli assegno un client reader
        if (ccv.getFileSocket() == null || !ccv.getFileSocket().isConnected()) {
            SocketFileConnector connector = new SocketFileConnector(ccv);
            connector.execute();

            while (!connector.isConnected()) {
                try {
                    Thread.sleep(300);
                } catch (InterruptedException ex) {
                    log.error(ex);
                }
            }

            ccv.setFileSocket(connector.getSocket());
            try {
                ccv.setFileOutputStream(connector.getSocket().getOutputStream());
                ClientReader clientReader = new ClientReader(ccv.getFileSocket(), ccv, ClientReader.FILEREADER);
                clientReader.execute();
            } catch (IOException ex) {
                log.error(ex);
            }
        }

        try {
            fileSender = new FileSender(new File(fileText.getText()), receiver, ccv.getFileOutputStream(), this);
            fileSender.execute();

            send.setText("Ferma");
        } catch (Exception e) {
            log.error(e);
        }
    }

    /**
     * annulla l'inivio e elimina questa finestra
     */
    private void stopSend() {
        fileSender.setActive(false);
        destroy();
    }

    /**
     * Lancia il pannello per la selezione dei file
     */
    @Action
    public void selectFile() {
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.showDialog(this, "OK");
        fileText.setText(jFileChooser.getSelectedFile().getPath());
    }

    /**
     * Chiude la finesra e la elimina dalla
     * lista dei trasferimenti attivi
     */
    public void destroy() {
        ccv.getHelper().getFileDialogs().remove(this);        
        this.setVisible(false);
    }
    
    public void transferRefusedFromReceiver(){
        statusLabel.setText("<html><font color=red>Il trasferimeto è stato rifiutato</p></html>");
        try {
            Thread.sleep(3000);
        } catch (InterruptedException interruptedException) {
            log.warn(interruptedException);
        }
        
        destroy();
        
    }
    public void transferStoppedFromReceiver(){
         statusLabel.setText("<html><font color=red>"+receiver+" ha annullato il trasferimeto"+"</p></html>");
         fileSender.setActive(false);
         try {
            Thread.sleep(3000);
        } catch (InterruptedException interruptedException) {
            log.warn(interruptedException);
        }
        
        destroy();
    }
    
    
    // <editor-fold defaultstate="collapsed" desc="Getter and setter">        
    public JLabel getStatusLabel() {
        return statusLabel;
    }

    public FileSender getFileSender() {
        return fileSender;
    }

    public void setFileSender(FileSender fileSender) {
        this.fileSender = fileSender;
    }

    public JTextField getFileText() {
        return fileText;
    }

    public void setFileText(JTextField fileText) {
        this.fileText = fileText;
    }

    public String getReceiver() {
        return receiver;
    }

    public void setReceiver(String receiver) {
        this.receiver = receiver;
    }

    public JButton getSend() {
        return send;
    }

    public void setSend(JButton send) {
        this.send = send;
    }

    public ChatClientView getCcv() {
        return ccv;
    }

    public void setCcv(ChatClientView ccv) {
        this.ccv = ccv;
    }

    public JLabel getPercentLabel() {
        return percentLabel;
    }

    public void setPercentLabel(JLabel percentLabel) {
        this.percentLabel = percentLabel;
    }

    public JProgressBar getProgressBar() {
        return progressBar;
    }

    public void setProgressBar(JProgressBar progressBar) {
        this.progressBar = progressBar;
    }    // </editor-fold> 

    
}


