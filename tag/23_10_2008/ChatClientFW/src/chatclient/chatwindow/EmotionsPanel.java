/*
 * emoctionsPanel.java
 *
 * Created on 2 ottobre 2008, 14.10
 */
package chatclient.chatwindow;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Point2D;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.event.MouseInputAdapter;
import javax.swing.text.BadLocationException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import emoticon.Emoticon;
import java.awt.Dimension;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.text.StyledDocument;

/**
 *
 * @author  Luigi
 */
public class EmotionsPanel extends javax.swing.JPanel {

//    static final int WINDOWX = 6;
//    static final int WINDOWY = 26;
    public static final int WINDOWX = 0;
    public static final int WINDOWY = 0;
    public static final double SCALEFACTOR = 1;
    public static final int TRASLAZIONEIMG = (int) (3 * SCALEFACTOR);
    public static final int LATOCASELLA = (int) (29 * SCALEFACTOR);
    public static final int IMGSIZE = 24;
    public static final int NUMIMGX = 8;
    public int NUMIMGY = 8;
//    public static final int ALTEZZATOT = LATOCASELLA * NUMIMGY + 1;
    public static final int LARGHEZZATOT = LATOCASELLA * NUMIMGX + 1;
    private Point2D selected;
    private Log log = LogFactory.getLog(this.getClass());
    private List<Emoticon> emotions;
    private ChatWindow chatWindow;
    private boolean fullView;

    /** Creates new form emoctionsPanel */
    public EmotionsPanel(ChatWindow chatWindow) {
        initComponents();
        addMouseMotionListener(new ClickListener());
        addMouseListener(new ClickListener());
        this.chatWindow = chatWindow;
        emotions = chatWindow.getEmoctionsManger().getEmotions();
        fullView = false;

        refreshNUMIMGY();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 349, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 372, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paint(Graphics g) {
//        super.paint(g);
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, getWidth(), getHeight());

        g.setColor(Color.LIGHT_GRAY);
//        ImageIcon icon = new ImageIcon(getClass().getResource("images/tray.png"));

        int lastPosition = EmotionsPanel.NUMIMGX * EmotionsPanel.NUMIMGX - 1;
        if (fullView) {
            lastPosition = emotions.size();
        }
        log.trace("last position : " + lastPosition);

        if (selected != null) {
            g.setColor(Color.LIGHT_GRAY);
            g.fillRect((int) (LATOCASELLA * selected.getX()), (int) (LATOCASELLA * selected.getY()), LATOCASELLA, LATOCASELLA);
            int selectedPosition = (int) (selected.getY() * NUMIMGX + selected.getX());

            if (selectedPosition < emotions.size() && selectedPosition != lastPosition) {
                Emoticon selectedEmotion = emotions.get(selectedPosition);
                setToolTipText("<html>" + selectedEmotion.getName() + "<br><p align=\"center\">" + selectedEmotion.getShortcut() + "</p></html>");
            } else if (selectedPosition == lastPosition && !fullView) {
                setToolTipText("<html><p align=\"center\"> Mostra<br>emoction personali </p></html>");

            } else if (selectedPosition == lastPosition && fullView) {
                setToolTipText("<html><p align=\"center\"> Nascondi<br>emoction personali </p></html>");
            }
        }
        //disegnno  emotion


        ImageIcon plus = new ImageIcon(this.getClass().getResource("resources/add.png"));
        log.trace("plus : " + plus);
        ImageIcon remove = new ImageIcon(this.getClass().getResource("resources/remove.png"));
        log.trace("remove : " + plus);

        int cont = 0;
        for (int i = 0; i < NUMIMGY; i++) {
            for (int j = 0; j < NUMIMGX; j++) {
                g.drawRect(LATOCASELLA * j, LATOCASELLA * i, LATOCASELLA, LATOCASELLA);
                if (cont < emotions.size() && cont < lastPosition) {
                    g.drawImage(emotions.get(cont).getImageIcon().getImage(), LATOCASELLA * j + TRASLAZIONEIMG, LATOCASELLA * i + TRASLAZIONEIMG, IMGSIZE, IMGSIZE, this);
                } else if (cont == lastPosition && !fullView) {
                    g.drawImage(plus.getImage(), LATOCASELLA * j + TRASLAZIONEIMG, LATOCASELLA * i + TRASLAZIONEIMG, IMGSIZE, IMGSIZE, this);
                } else if (cont == lastPosition && fullView) {
                    g.drawImage(remove.getImage(), LATOCASELLA * j + TRASLAZIONEIMG, LATOCASELLA * i + TRASLAZIONEIMG, IMGSIZE, IMGSIZE, this);
                }
                cont++;
                if (!fullView && cont == (NUMIMGX * NUMIMGX)) {
                    break;
                }
            }
        }

    }

    // <editor-fold defaultstate="collapsed" desc="Getter and setter">        
    public Point2D getSelected() {
        return selected;
    }

    public void setSelected(Point2D selected) {
        this.selected = selected;
    }

    public ChatWindow getChatWindow() {
        return chatWindow;
    }

    public void setChatWindow(ChatWindow chatWindow) {
        this.chatWindow = chatWindow;
    }

    public List<Emoticon> getEmotions() {
        return emotions;
    }

    public void setEmotions(List<Emoticon> emotions) {
        this.emotions = emotions;
    }

    public boolean isFullView() {
        return fullView;
    }

    public void setFullView(boolean fullView) {
        this.fullView = fullView;
    }    //</editor-fold>


    public void refreshNUMIMGY() {
        if (fullView) {
            NUMIMGY = emotions.size() / NUMIMGX;
            if (emotions.size() % NUMIMGX != 0) {
                NUMIMGY++;
            }
        } else {
            NUMIMGY = NUMIMGX;
        }
        log.debug("NUMIMGY : " + NUMIMGY);

    }
}

/**
 * Listener che ad ogni click del mouse sulla scacchiera 
 * setta su canvas la posizione del click e lancia il repaint()
 * @author Luigi
 */
class ClickListener extends MouseInputAdapter implements MouseMotionListener {

    private Log log = LogFactory.getLog(this.getClass());

    /**
     * quando il mouse si muove sul pannello evidenzia la
     * casella su cui questo si trova
     * @param e
     */
    @Override
    public void mouseMoved(MouseEvent e) {
        super.mouseMoved(e);
        EmotionsPanel canvas = (EmotionsPanel) e.getComponent();

        int pointX = (int) e.getPoint().getX() / EmotionsPanel.LATOCASELLA;
        int pointY = (int) e.getPoint().getY() / EmotionsPanel.LATOCASELLA;

        canvas.setSelected(new Point(pointX, pointY));
//        canvas.setToolTipText("emo" + pointX + pointY);

        canvas.repaint();
    }

    /**
     * elimina la pedina selezionata qunado
     * il mouse esce dal pannello
     * @param e
     */
    @Override
    public void mouseExited(MouseEvent e) {
        super.mouseExited(e);
        EmotionsPanel canvas = (EmotionsPanel) e.getComponent();

        canvas.setSelected(null);
        canvas.repaint();
    }

    /**
     * Al click del mouse inserisce lo shorcut dell'emotion selzionata 
     * nell'input text della ChatWindows
     * @param e
     */
    @Override
    public void mousePressed(MouseEvent e) {

        EmotionsPanel panel = (EmotionsPanel) e.getComponent();
        ChatWindow chatWindow = panel.getChatWindow();

        int clickX = e.getX() / EmotionsPanel.LATOCASELLA;
        int clickY = e.getY() / EmotionsPanel.LATOCASELLA;

        int positionOnList = clickY * EmotionsPanel.NUMIMGX + clickX;

        log.debug("positionOnList : " + positionOnList);

        int lastPosition = EmotionsPanel.NUMIMGX * EmotionsPanel.NUMIMGX - 1;
        if (panel.isFullView()) {
            lastPosition = panel.getEmotions().size();
        }
        log.debug("last position : " + lastPosition);

        if (positionOnList < lastPosition) {
            Emoticon selected = chatWindow.getEmoctionsManger().getEmotions().get(positionOnList);

            log.debug("selecte demotion : " + selected.getName());
            StyledDocument document = chatWindow.getInputText().getStyledDocument();
            try {
                document.insertString(document.getLength(), selected.getShortcut(), null);
                chatWindow.getEmoctionsManger().repleceIEmotionsInText(chatWindow.getInputText().getStyledDocument());
                chatWindow.getInputText().requestFocus();
            } catch (BadLocationException ex) {
                log.error(ex);
            } finally {
                chatWindow.getEmotionsPanel().setVisible(false);
            }
        } else if (positionOnList == lastPosition) {
            panel.setFullView(!panel.isFullView());
            panel.refreshNUMIMGY();
            Dimension old = panel.getSize();
            old.setSize(old.getWidth(), panel.NUMIMGY * EmotionsPanel.LATOCASELLA + EmotionsPanel.WINDOWY);
            JDialog emotionDialog = (JDialog) panel.getRootPane().getParent();
            emotionDialog.setSize(old);
            if (panel.isFullView()) {
                emotionDialog.setLocation((int) emotionDialog.getLocation().getX(), (int) emotionDialog.getLocation().getY() - (EmotionsPanel.LATOCASELLA * (panel.NUMIMGY - EmotionsPanel.NUMIMGX)));
            } else {
                int totimgY = panel.getEmotions().size() / EmotionsPanel.NUMIMGX;
                if (panel.getEmotions().size() % EmotionsPanel.NUMIMGX != 0) {
                    totimgY++;
                }
                emotionDialog.setLocation((int) emotionDialog.getLocation().getX(), (int) emotionDialog.getLocation().getY() + (EmotionsPanel.LATOCASELLA * (totimgY - EmotionsPanel.NUMIMGX)));
            }
            panel.repaint();
        }
    }
}
