/*
 * Home.java
 *
 * Created on 10 settembre 2008, 13.45
 */
package gg.msn.ui.game;

import gg.msn.core.manager.PersistentDataManager;
import gg.msn.ui.ChatClientView;
import gg.msn.ui.game.dama.*;
import javax.swing.JButton;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * @author  Luigi
 */
public class GameHome extends javax.swing.JFrame {

    static Log log = LogFactory.getLog(GameHome.class);
    private ChatClientView ccv;
    private Canvas canvas;

    /** Creates new form Home */
    public GameHome(ChatClientView ccv) {
        this.ccv = ccv;
        initComponents();

//        setLayout(new CardLayout());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 175, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 131, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
// TODO add your handling code here:
    ccv.getHelper().getCanvases().remove(this.getCanvas());
}//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public ChatClientView getCcv() {
        return ccv;
    }

    public void setCcv(ChatClientView ccv) {
        this.ccv = ccv;
    }

//    public String getNickAdeversar() {
//        return nickAdeversar;
//    }
//
//    public void setNickAdeversar(String nickAdeversar) {
//        this.nickAdeversar = nickAdeversar;
//    }
    public Canvas getCanvas() {
        return canvas;
    }

    public void setCanvas(Canvas canvas) {
        this.canvas = canvas;
    }

    public void startDamaServer(String nickAdversar) {
        // TODO add your handling code here:
        //creo il piano di gioco canvas
        //lo visualizzo nel pannello e lancio la connessione
        DamaCanvas newCanvas = new DamaCanvas(this, Pedina.WHITE, nickAdversar);
        setContentPane(newCanvas);
        setSize((int) (8 * DamaCanvas.LATOCASELLA + DamaCanvas.WINDOWX), (int) (8 * DamaCanvas.LATOCASELLA + DamaCanvas.WINDOWY) + DamaCanvas.MESSAGEHEIGTH);
        validate();
        log.debug("add to canvs os = " + PersistentDataManager.getOutputStream());
        newCanvas.setOs(PersistentDataManager.getOutputStream());
        this.canvas = newCanvas;
        ccv.getHelper().getCanvases().add(newCanvas);
//        new ClientReader(ccv.getSocket(), canvas).execute();
    }

    public void startDamaClient(String nickAdversar) {
// TODO add your handling code here:
        //creo il piano di gioco canvas
        //lo visualizzo nel pannello e lancio la connessione
        DamaCanvas newCanvas = new DamaCanvas(this, Pedina.BLACK, nickAdversar);
        setContentPane(newCanvas);
        setSize((int) (8 * DamaCanvas.LATOCASELLA + DamaCanvas.WINDOWX), (int) (8 * DamaCanvas.LATOCASELLA + DamaCanvas.WINDOWY) + DamaCanvas.MESSAGEHEIGTH);
        validate();
        log.debug("add to canvs os = " + PersistentDataManager.getOutputStream());
        newCanvas.setOs(PersistentDataManager.getOutputStream());

        this.canvas = newCanvas;
        ccv.getHelper().getCanvases().add(newCanvas);
//        new ClientReader(ccv.getSocket(), canvas).execute();
    }
}
